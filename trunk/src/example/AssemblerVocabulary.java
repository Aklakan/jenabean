/* CVS $Id: $ */
package example; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*; 
/**
 * Vocabulary definitions from file:src/example/assembler.n3 
 * @author Auto-generated by schemagen on 07 Jan 2008 21:29 
 */
public class AssemblerVocabulary {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://jena.hpl.hp.com/2005/11/Assembler#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>property of a Connection that specifies as a URI Resource the URL of the database 
     *  to connect to.</p>
     */
    public static final OntProperty dbURL = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbURL" );
    
    /** <p>property of a UnionModel that specifies one of its non-root sub-models. Arbitrarily 
     *  many sub-models can be supplied.</p>
     */
    public static final OntProperty subModel = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#subModel" );
    
    /** <p>property of a DocumentManager whose value is its FileManager</p> */
    public static final OntProperty fileManager = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#fileManager" );
    
    /** <p>property of an OntModelSpec that specifies the ontology language.</p> */
    public static final OntProperty ontLanguage = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#ontLanguage" );
    
    /** <p>FileManager property which identifies its LocationMapper.</p> */
    public static final OntProperty locationMapper = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#locationMapper" );
    
    /** <p>FileModel property to give language encoding</p> */
    public static final OntProperty fileEncoding = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#fileEncoding" );
    
    /** <p>property of a FileModel giving the directory in which the modelName is to 
     *  be resolved. Query: is the current behaviour of FileModels to be preserved?</p>
     */
    public static final OntProperty directory = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#directory" );
    
    /** <p>property specifying that the subject RDBModel is built using the connection 
     *  specified by the object.</p>
     */
    public static final OntProperty connection = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#connection" );
    
    /** <p>property for specifying the URL of a SimplePrefixMapping</p> */
    public static final OntProperty namespace = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#namespace" );
    
    /** <p>optional property of an inference model that specifies the base model over 
     *  which inference is done.</p>
     */
    public static final OntProperty baseModel = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#baseModel" );
    
    /** <p>specifies the name of the encoding language (N3, RDF/XML, etc) for the associated 
     *  file or string. Overrides any guess that might otherwise be made. Guesses 
     *  when omitted: starts with '&lt;' means RDF/XML, starts with '@' or '#' means 
     *  N3, otherwise NTRIPLE</p>
     */
    public static final OntProperty contentEncoding = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#contentEncoding" );
    
    /** <p>property of a database connection that specifies as a string the name of a 
     *  Java class to be loaded before connection is attemped.</p>
     */
    public static final OntProperty dbClass = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbClass" );
    
    /** <p>property of an OntModel giving its OntModelSpec</p> */
    public static final OntProperty ontModelSpec = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#ontModelSpec" );
    
    /** <p>specifies that the subject Loadable is to be loaded with all the contents 
     *  specified by the object Content.</p>
     */
    public static final OntProperty content = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#content" );
    
    /** <p>specifies that the subject Loadable is to be loaded with all the contents 
     *  specified by the object Load when it is first created - ie not when eg an 
     *  existing database model is opened.</p>
     */
    public static final OntProperty initialContent = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#initialContent" );
    
    /** <p>property of a Reasoner specifying schema Models to be loaded. Multiple schemas 
     *  can be given; they are unioned together before being supplied to the reasoner.</p>
     */
    public static final OntProperty schema = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#schema" );
    
    /** <p>property of a GenericRuleReasoner or RuleSet which specifies rules given witin 
     *  rulesets within the Assembler RDF. Multiple such properties can be given.</p>
     */
    public static final OntProperty rules = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#rules" );
    
    /** <p>property for specifing the prefix of a SimplePrefixMapping</p> */
    public static final OntProperty prefix = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#prefix" );
    
    /** <p>property of a ReasonerFactory specifying the URL of the reasoner in the reasoner 
     *  registry; only one such property per reasoner.</p>
     */
    public static final OntProperty reasonerURL = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#reasonerURL" );
    
    /** <p>property of a UnionModel that specifies its mutable base model</p> */
    public static final OntProperty rootModel = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#rootModel" );
    
    /** <p>property of a database connection that specifies the name of a Java system 
     *  property the password used to authorise the connection.</p>
     */
    public static final OntProperty dbPasswordProperty = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbPasswordProperty" );
    
    /** <p>property of a RuleSet specifying a rule (or rules) as a literal string.</p> */
    public static final OntProperty rule = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#rule" );
    
    /** <p>the subject Load is to be loaded from the object String</p> */
    public static final OntProperty literalContent = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#literalContent" );
    
    /** <p>property whose object is another JA description to be loaded into this one; 
     *  equivalent to owl:imports.</p>
     */
    public static final OntProperty imports = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#imports" );
    
    /** <p>property of a Connection that specifies the name of a Java system property 
     *  containing the URL of the database to connect to.</p>
     */
    public static final OntProperty dbURLProperty = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbURLProperty" );
    
    /** <p>property of an OntModelSpec that specifies the importSource of the model. 
     *  If omitted, the model has a default MemoryModelMaker.</p>
     */
    public static final OntProperty importSource = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#importSource" );
    
    /** <p>property of an OntModelSpec that specifies the document manager of the model. 
     *  If omitted, the model has the default document manager.</p>
     */
    public static final OntProperty documentManager = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#documentManager" );
    
    /** <p>property of a database connection that specifies as a string the name of the 
     *  database user for which the connection is to be made.</p>
     */
    public static final OntProperty dbUser = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbUser" );
    
    /** <p>property used to attach a PrefixMapping to a Model</p> */
    public static final OntProperty prefixMapping = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#prefixMapping" );
    
    /** <p>property to attach a ReificationMode to a Model</p> */
    public static final OntProperty reificationMode = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#reificationMode" );
    
    /** <p>property of a database connection that specifies the name of a Java system 
     *  property containing the type of the database to connect to.</p>
     */
    public static final OntProperty dbTypeProperty = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbTypeProperty" );
    
    /** <p>property to allow one prefix mapping to include another</p> */
    public static final OntProperty includes = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#includes" );
    
    /** <p>property of a database connection that specifies the name of a Java system 
     *  property containing the name of the database user for which the connection 
     *  is to be made.</p>
     */
    public static final OntProperty dbUserProperty = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbUserProperty" );
    
    /** <p>the subject Load is to be loaded from the object URL</p> */
    public static final OntProperty externalContent = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#externalContent" );
    
    /** <p>property of a RuleSet which identifies rules by their URL. The target resource 
     *  is loaded and parsed as a rule string.</p>
     */
    public static final OntProperty rulesFrom = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#rulesFrom" );
    
    /** <p>property of a database connection that specifies as a string the name a Java 
     *  system property containing the name of a Java class to be loaded before connection 
     *  is attemped.</p>
     */
    public static final OntProperty dbClassProperty = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbClassProperty" );
    
    /** <p>property of an OntModelSpec giving the reasoner for the spec</p> */
    public static final OntProperty reasonerFactory = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#reasonerFactory" );
    
    /** <p>property of a FileModel specifying whether the modelName should be escaped 
     *  by replacing _, /, and : by __, _S, _C before being used, to allow URIs as 
     *  model names without implying nested directory strucure. If ommitted or not 
     *  ja:true, no translation is done.</p>
     */
    public static final OntProperty mapName = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#mapName" );
    
    /** <p>property of a ReasonerFactory giving the class name</p> */
    public static final OntProperty reasonerClass = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#reasonerClass" );
    
    /** <p>property of an inference model that specifies the reasoner to use.</p> */
    public static final OntProperty reasoner = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#reasoner" );
    
    /** <p>property specifying that the subject NamedModel shall have the object String 
     *  as its name. If the object is a URI node, it has the spelling of the URI as 
     *  its name.</p>
     */
    public static final OntProperty modelName = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#modelName" );
    
    /** <p>property of a database connection that specifies as a string the type of the 
     *  database to connect to.</p>
     */
    public static final OntProperty dbType = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbType" );
    
    /** <p>property of a database connection that specifies as a string the password 
     *  used to authorise the connection.</p>
     */
    public static final OntProperty dbPassword = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#dbPassword" );
    
    /** <p>property of a DocumentManager whose value is its metadata policy path</p> */
    public static final OntProperty policyPath = m_model.createOntProperty( "http://jena.hpl.hp.com/2005/11/Assembler#policyPath" );
    
    /** <p>reification mode Standard - all reification triples visible</p> */
    public static final Individual standard = m_model.createIndividual( "http://jena.hpl.hp.com/2005/11/Assembler#standard", m_model.createClass( "http://jena.hpl.hp.com/2005/11/Assembler#ReificationMode" ) );
    
    /** <p>reification mode Minimal - no reification triples visible</p> */
    public static final Individual minimal = m_model.createIndividual( "http://jena.hpl.hp.com/2005/11/Assembler#minimal", m_model.createClass( "http://jena.hpl.hp.com/2005/11/Assembler#ReificationMode" ) );
    
    /** <p>reification mode Convenient</p> */
    public static final Individual convenient = m_model.createIndividual( "http://jena.hpl.hp.com/2005/11/Assembler#convenient", m_model.createClass( "http://jena.hpl.hp.com/2005/11/Assembler#ReificationMode" ) );
    
}
