Java developers have objects.  Jena has triples.  We need something to translate an object with one or more properties into a set of triples that loosely say the same thing.  The first step is to create an instance of `thewebsemantic.Bean2RDF`:

{{{
Bean2RDF writer = new Bean2RDF(myModel);
}}}

Jenabean attempts to be as non-intrusive as possible, however, it requires your bean to have an id field or method marked with the `@Id` annotation.

{{{
public class Customer {
  @Id private int customerId;
  // class abbreviated
}
}}}

or using a method

{{{
public class Book {
  private String isbn;

  @Id public String getIsbn() {
    return isbn;
  }
  // class abbreviated
}
}}}

Saving or persisting a bean within a Jena model is a simple method call.

{{{
Customer cust = new Customer();
cust.setId(0);
writer.save(cust);
}}}

The results are a set of triples, and printed in N3 format it looks like this...

{{{
<http://thewebsemantic.com/javaclass>
      a       <http://www.w3.org/2002/07/owl#AnnotationProperty> .

<http://example/Customer>
      a       <http://www.w3.org/2000/01/rdf-schema#Class> ;
      <http://thewebsemantic.com/javaclass>
              "example.Customer" .

<http://example/Customer/0>
      a       <http://example/Customer> ;
      <http://example/customerId>
              "0"^^<http://www.w3.org/2001/XMLSchema#int> ;
      <http://example/name>
              "1st National"^^<http://www.w3.org/2001/XMLSchema#string> .
}}}